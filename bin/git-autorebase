#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# Small script to pull master, run through all branches and rebase them to
# master/main
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
set -o errexit
set -o nounset
set -o pipefail

# check bash version compatiblity requires 4.2 or better
shopt -u compat41 2>/dev/null || {
  echo -n "\nBash Version 4.2 or higher is required!\n";
  exit 127;
}

# -----------------------------------------------------------------------------
# Globals
# -----------------------------------------------------------------------------
declare -r SCRIPT=${0##*/}
declare -r VERSION=0.7.2
declare -r AUTHOR="Urs Roesch <github@bun.ch>"
declare -r LICENSE="GLPv2"
declare -r DIVIDER=$(printf "%0.1s" -{0..80})
declare -g PUSH="false"
declare -g BASE=""
declare -x OVERCOMMIT_DISABLE=0
declare -a DEFAULT_BASES=( master main )
declare -a EXCLUDES=()

# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------
function usage() {
  local exit_code=${1:-1}
  cat <<USAGE

  Usage:
    ${SCRIPT/-/ } [options]

  Options:
    -h | --help                This message
    -p | --push                Push rebased repos to upstream
    -b | --base                Set the default base branch
                               Default: 'main' or 'master'
    -x | --exclude <branch,..> Exclude branches from being rebased.
                               Separate branches with commas.
    -V | --version             Display version and exit

  Description:
    Small script to pull the master/main branch and then rebase all other
    branches sequentially to master/main.

USAGE
  exit ${exit_code}
}

# -----------------------------------------------------------------------------

function parse_options() {
  while [[ ${#} -gt 0 ]]; do
    case ${1} in
    -h|--help)    usage 0;;
    -b|--base)    shift; BASE=${1};;
    -p|--push)    PUSH=true;;
    -x|--exclude) shift; EXCLUDES+=( ${1//,/ } );;
    -V|--version) version;;
    -*)           usage 1;;
    esac
    shift
  done
}

# -----------------------------------------------------------------------------

function version() {
  printf "%s v%s\nCopyright (c) %s\nLicense - %s\n" \
    "${SCRIPT/-/ }" "${VERSION}" "${AUTHOR}" "${LICENSE}"
  exit 0
}

# -----------------------------------------------------------------------------

function current_branch() {
  git rev-parse --abbrev-ref HEAD
}

# -----------------------------------------------------------------------------

function git_root() {
  git rev-parse --show-toplevel
}

# -----------------------------------------------------------------------------

function join_array() {
  local -- char=${1}; shift;
  local -a array=( "${@}" )
  printf -v string "%s${char}" "${array[@]}"
  echo "${string%${char}}"
}

# -----------------------------------------------------------------------------

function which_base() {
  [[ -n ${BASE} ]] && return 0
  # prefer master over main
  local pattern=$(join_array '|' "${DEFAULT_BASES[@]}")
  local -a branches=( $(git branch | grep -oE "\<(${pattern})\>" | sort -r ) )
  BASE=${branches[0]:-}
}

# -----------------------------------------------------------------------------

function uses_overcommit() {
  [[ -f $(git_root)/.overcommit.yml ]]
}

# -----------------------------------------------------------------------------

function git_env() {
  if uses_overcommit; then
    OVERCOMMIT_DISABLE=1
  fi
}

# -----------------------------------------------------------------------------

function switch_to_base() {
  local branch=$(current_branch)
  if [[ ${branch} != ${BASE} ]]; then
    echo "Switching to branch '$BASE'"
    git checkout ${BASE}
  fi
}

# -----------------------------------------------------------------------------

function pull() {
  git pull
}

# -----------------------------------------------------------------------------

function rebase_branches() {
  local -- pattern=$(join_array '|' ${EXCLUDES[@]:-} ${BASE})
  local -a local_branches=( $(git branch | grep -Ewv "(${pattern})" ) )
  for branch in ${local_branches[@]:-}; do
    echo
    echo "${DIVIDER}"
    git checkout ${branch}
    git rebase ${BASE}
    if [[ ${PUSH} == true ]]; then
      git push -f origin ${branch}
    fi
  done
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
parse_options "${@}"
git_env
which_base
switch_to_base
pull
rebase_branches
switch_to_base
