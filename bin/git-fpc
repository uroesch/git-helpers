#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# Small script to pull master, fetch --prune and delete matching branches
# FPC stands for fetch, prune and consolidate
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
set -o errexit
set -o nounset
set -o pipefail

# -----------------------------------------------------------------------------
# Globals
# -----------------------------------------------------------------------------
declare -r SCRIPT=${0##*/}
declare -r VERSION="0.3.0"
declare -r AUTHOR="Urs Roesch <github@bun.ch>"
declare -r LICENSE="GPLv2"
declare -g FORCE=""
declare -g REMOVE=""
declare -x OVERCOMMIT_DISABLE=0

# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------
function usage() {
  local exit_code=${1:-1}
  cat <<USAGE

  Usage:
    ${SCRIPT//-/ } [options]

  Opttions:
    -h | --help    This message
    -V | --version Display version and exit

  Description:
    Small script to pull master, fetch prune and delete matching local branches
    FPC stands for fetch, prune and consolidate

USAGE

  exit ${exit_code}
}

# -----------------------------------------------------------------------------

function parse_options() {
  while [[ ${#} -gt 0 ]]; do
    case ${1} in
    -h|--help)    usage 0;;
    -V|--version) version;;
    -*)           usage 1;;
    esac
    shift
  done
}

# -----------------------------------------------------------------------------

function version() {
  printf "%s v%s\nCopyright (c) %s\nLicense - %s\n" \
    "${SCRIPT}" "${VERSION}" "${AUTHOR}" "${LICENSE}"
  exit 0
}

# -----------------------------------------------------------------------------

function current_branch() {
  git rev-parse --abbrev-ref HEAD
}

# -----------------------------------------------------------------------------

function git_root() {
  git rev-parse --show-toplevel
}

# -----------------------------------------------------------------------------

function uses_overcommit() {
  [[ -f $(git_root)/.overcommit.yml ]]
}

# -----------------------------------------------------------------------------

function git_env() {
  if uses_overcommit; then
    OVERCOMMIT_DISABLE=1
  fi
}

# -----------------------------------------------------------------------------

function switch_to_master() {
  local branch=$(current_branch)
  if [[ ${branch} != master ]]; then
    echo "Switching to branch 'master'"
    git checkout master
  fi
}

# -----------------------------------------------------------------------------

function pull() {
  git pull
}

# -----------------------------------------------------------------------------

function fetch_prune() {
  git fetch --prune 2>&1 | \
    sed -r \
     -e '/\[deleted\]/!d' \
     -e 's|^.[^/]*/||g'
}

# -----------------------------------------------------------------------------

function delete_branches() {
  local -a deleted_branches=( $(fetch_prune) )
  local -a local_branches=( $(git branch | grep -v master) )
  for branch in ${deleted_branches[@]:-}; do
    if [[ ${local_branches[@]:-} =~ ${branch} ]]; then
      git branch -d ${branch}
    fi
  done
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
parse_options "${@}"
git_env
switch_to_master
pull
delete_branches
switch_to_master
